package com.zhiliao.controller.php;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.model.php.PlatCount;
import com.zhiliao.model.php.SchCount;
import com.zhiliao.service.order.OrderService;
import com.zhiliao.service.php.PhpExamService;
import com.zhiliao.service.php.PlatCountService;
import com.zhiliao.util.ListSortUtil;
import com.zhiliao.util.dbdriver.MultipleDataSource;

@Controller
@RequestMapping("phpExam")
public class PhpExamController {

	@Autowired
	private PlatCountService countService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private PhpExamService examService;
	
	/**
	 * 跳转到数据分析页面
	 * @Title: examInfoView 
	 * @return String
	 */
	@RequestMapping("examInfoView.action")
	private String examInfoView(HttpServletRequest request,
								@RequestParam(value="gradeId",required=false)Integer gradeId,
								@RequestParam(value="areaId",required=false)Integer areaId){
		request.getSession().setAttribute("gradeId", gradeId);
		request.getSession().setAttribute("areaId", areaId);
		return "exam/exam-info";
	}
	
	
	/**
	 * 获取学校的提交率信息
	 * @Title: getAvgBySchool 
	 * @param @param gradeId
	 * @param @param areaId
	 * @param @param index
	 * @return Map<String,Object>
	 */
	@RequestMapping("/getRateBySchool.action")
	@ResponseBody
	public Map<String, Object> getRateBySchool(@RequestParam(value="gradeId",required = false)Integer gradeId,
			  								   @RequestParam(value="areaId",required=false)Integer areaId,
			  								   @RequestParam(value="week",required=false)Integer week,
			  								   @RequestParam(value="index",required = true)Integer index){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<SchCount> list = new ArrayList<SchCount>();
		
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		if(index==0){//综合提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("gradeId", count.getGradeId());
				map.put("schoolId", count.getSchoolId());
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
			
		}else if(index==1){//数学提交率
			//获取数学提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",11);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("gradeId", count.getGradeId());
				map.put("schoolId", count.getSchoolId());
				map.put("subject",11);
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
		}else if(index==2){//语文提交率
			//获取数学提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",10);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("gradeId", count.getGradeId());
				map.put("schoolId", count.getSchoolId());
				map.put("subject",11);
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
		}
		//降序排列
		ListSortUtil<SchCount> sortList = new ListSortUtil<SchCount>();
		sortList.sort(list, "cityAvg", "desc");
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		
		return resultMap;
	}
	
	
	
	/**
	 * 获取学校的平均成绩
	 * @Title: getAvgBySchool 
	 * @param @param gradeId
	 * @param @param areaId
	 * @param @param index
	 * @return Map<String,Object>
	 */
	@RequestMapping("/getAvgBySchool.action")
	@ResponseBody
	public Map<String, Object> getAvgBySchool(@RequestParam(value="gradeId",required = false)Integer gradeId,
			  								  @RequestParam(value="areaId",required=false)Integer areaId,
			  								  @RequestParam(value="week",required=false)Integer week,
			  								  @RequestParam(value="index",required = true)Integer index){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<SchCount> list = new ArrayList<SchCount>();
		
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		if(index==0){//综合平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
			
		}else if(index==1){//数学平均分
			//获取数学平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",11);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
		}else if(index==2){//语文平均分
			//获取数学平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",10);
			map.put("week", week);
			list = this.examService.getAvgInfo(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
		}
		//降序排列
		ListSortUtil<SchCount> sortList = new ListSortUtil<SchCount>();
		sortList.sort(list, "schoolAvg", "desc");
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		
		return resultMap;
	}
	
	
	/**
	 * 获取班级的提交率信息
	 * @Title: getAvgBySchool 
	 * @param @param gradeId
	 * @param @param areaId
	 * @param @param index
	 * @return Map<String,Object>
	 */
	@RequestMapping("/getRateByClass.action")
	@ResponseBody
	public Map<String, Object> getRateByClass(@RequestParam(value="gradeId",required = false)Integer gradeId,
			  								  @RequestParam(value="areaId",required=false)Integer areaId,
			  								  @RequestParam(value="week",required=false)Integer week,
			  								  @RequestParam(value="index",required = true)Integer index){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<SchCount> list = new ArrayList<SchCount>();
		
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		if(index==0){//综合提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("class", count.getClassId());
				map.put("schoolId", count.getSchoolId());
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
			
		}else if(index==1){//数学提交率
			//获取数学提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",11);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("class", count.getClassId());
				map.put("schoolId", count.getSchoolId());
				map.put("subject",11);
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
		}else if(index==2){//语文提交率
			//获取数学提交率
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",10);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算提交率
				map.clear();
				map.put("class", count.getClassId());
				map.put("schoolId", count.getSchoolId());
				map.put("subject",11);
				MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
				//获取开通人数
				int rows = this.orderService.getOrderCount(map);
				count.setOpenCount(rows);
				
				if(rows!=0){
					count.setCityAvg((float)count.getReferCount()/rows);
				}else {
					count.setCityAvg((float)0);
				}
			}
		}
		//降序排列
		ListSortUtil<SchCount> sortList = new ListSortUtil<SchCount>();
		sortList.sort(list, "cityAvg", "desc");
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		
		return resultMap;
	}
	
	
	
	/**
	 * 获取班级的平均成绩
	 * @Title: getAvgBySchool 
	 * @param @param gradeId
	 * @param @param areaId
	 * @param @param index
	 * @return Map<String,Object>
	 */
	@RequestMapping("/getAvgByClass.action")
	@ResponseBody
	public Map<String, Object> getAvgByClass(@RequestParam(value="gradeId",required = false)Integer gradeId,
			  								 @RequestParam(value="areaId",required=false)Integer areaId,
			  								 @RequestParam(value="week",required=false)Integer week,
			  								 @RequestParam(value="index",required = true)Integer index){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		List<SchCount> list = new ArrayList<SchCount>();
		
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		if(index==0){//综合平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
			
		}else if(index==1){//数学平均分
			//获取数学平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",11);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
		}else if(index==2){//语文平均分
			//获取数学平均分
			map.clear();
			map.put("gradeId", gradeId);
			map.put("areaId", areaId);
			map.put("subject",10);
			map.put("week", week);
			list = this.examService.getAvgClass(map);
			for(SchCount count :list){//计算平均分
				if(count.getReferCount()!=0){
					count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
				}else {
					count.setSchoolAvg((float)0);
				}
			}
		}
		//降序排列
		ListSortUtil<SchCount> sortList = new ListSortUtil<SchCount>();
		sortList.sort(list, "schoolAvg", "desc");
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		
		return resultMap;
	}
	
	
	
	
	
	
	/**
	 * 获取平均分,产生折线图
	 * @param schoolId
	 * @param gradeId
	 * @return
	 */
	@RequestMapping("/getAvgInfo.action")
	@ResponseBody
	public Map<String, Object> getAvgInfo(@RequestParam(value="gradeId",required = false)Integer gradeId,
										  @RequestParam(value="areaId",required=false)Integer areaId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		//获取数学平均分
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject",11);
		List<PlatCount> mathList = this.countService.getAvgInfo(map);
		for(PlatCount count :mathList){//计算平均分
			if(count.getReferCount()!=0){
				count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setSchoolAvg((float)0);
			}
		}
		//获取英语平均分
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject",10);
		List<PlatCount> engList = this.countService.getAvgInfo(map);
		for(PlatCount count :engList){//计算平均分
			if(count.getReferCount()!=0){
				count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setSchoolAvg((float)0);
			}
		}
		//获取综合平均分
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		List<PlatCount> list = this.countService.getAvgInfo(map);
		for(PlatCount count :list){//计算平均分
			if(count.getReferCount()!=0){
				count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setSchoolAvg((float)0);
			}
		}
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		resultMap.put("eng", engList);
		resultMap.put("math", mathList);
		return resultMap;
	}
	
	/**
	 * 获取提交率
	 * @param gradeId
	 * @return
	 */
	@RequestMapping("/getCount.action")
	@ResponseBody
	public Map<String, Object> getCount (@RequestParam(value="gradeId",required=false)Integer gradeId,
			                             @RequestParam(value="areaId",required=false)Integer areaId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		List<PlatCount> mathList = new ArrayList<PlatCount>();
		List<PlatCount> engList = new ArrayList<PlatCount>();
		//获取数学
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject", 11);
		List<PlatCount> mathRefer = this.countService.getReferCount(map);
		//map.put("tableName", " x2_examhistory_"+areaId+" as x2" );
		//sql语句
		String sql = "select count(ehuserid) grantCount,ehzhou week "
				+ " from x2_examhistory_"+areaId+" x2 "
				+ " LEFT JOIN tms_els_test.sys_school ss ON ss.school_id = x2.ehschoolid "
				+ " where ehschoolid <>166";
		if(null!=gradeId){
			sql+=" AND ehgradeid ="+gradeId;
		}
		if(null!=areaId){
			sql+=" AND ss.area_id ="+areaId;
		}
		sql+=" and ehsubject = 11 GROUP BY ehzhou ORDER BY ehzhou DESC";
		map.clear();
		map.put("sql", sql);
		List<PlatCount> mathGrant = this.countService.getGrantInfo(map);
		
		//获取英语
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject", 10);
		List<PlatCount> engRefer = this.countService.getReferCount(map);
		//map.put("tableName", " x2_examhistory_"+areaId+" as x2");
		sql="";//sql语句
		sql = "select count(ehuserid) grantCount,ehzhou week "
				+ " from x2_examhistory_"+areaId+" x2 "
				+ " LEFT JOIN tms_els_test.sys_school ss ON ss.school_id = x2.ehschoolid "
				+ " where ehschoolid <>166";
		if(null!=gradeId){
			sql+=" AND ehgradeid ="+gradeId;
		}
		if(null!=areaId){
			sql+=" AND ss.area_id ="+areaId;
		}
		sql+=" and ehsubject = 11 GROUP BY ehzhou ORDER BY ehzhou DESC";
		map.clear();
		map.put("sql", sql);//拼接sql语句
		List<PlatCount> engGrant = this.countService.getGrantInfo(map);
		
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		//获取开通数(英语)
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject", 10);
		int engRow = this.orderService.getOrderCount(map);
		
		//获取开通数(数学)
		map.clear();
		map.put("gradeId", gradeId);
		map.put("areaId", areaId);
		map.put("subject", 11);
		int mathRow = this.orderService.getOrderCount(map);
		
		//英语
		for(PlatCount platCount:engRefer){
			for(PlatCount count:engGrant){
				if(platCount.getWeek()==count.getWeek()){
					PlatCount plat = new PlatCount();
					plat.setGrantCount(count.getGrantCount());
					plat.setReferCount(platCount.getReferCount());
					plat.setWeek(count.getWeek());
					engList.add(plat);
					continue;
				}
			}
		}
		//数学
		for(PlatCount platCount:mathRefer){
			for(PlatCount count:mathGrant){
				if(platCount.getWeek()==count.getWeek()){
					PlatCount plat = new PlatCount();
					plat.setGrantCount(count.getGrantCount());
					plat.setReferCount(platCount.getReferCount());
					plat.setWeek(count.getWeek());
					mathList.add(plat);
					continue;
				}
			}
		}
		
		resultMap.put("status", true);
		resultMap.put("eng",engList);
		resultMap.put("engCount",engRow);
		resultMap.put("math", mathList);
		resultMap.put("mathCount",mathRow);
		return resultMap;
	}
	
	
	
	
	
	
	
}
