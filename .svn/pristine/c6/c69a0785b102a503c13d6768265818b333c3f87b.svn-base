package com.zhiliao.controller.user;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.dao.user.UserTypeMapper;
import com.zhiliao.model.common.Pagination;
import com.zhiliao.model.user.UserType;
import com.zhiliao.service.user.UserTypeService;

@Controller
@RequestMapping(value="/type")
public class UserTypeController {
	
	@Autowired
	private UserTypeService userTypeService;

	/**
	 * 跳转到用户类型的列表页面
	 * @return
	 */
	@RequestMapping(value="/userTypeView.action")
	public String  userTypeView(){
		return "user/userType-list";
	}
	
	/**
	 * 跳转到用户类型增加页面
	 * @return
	 */
	@RequestMapping(value="/userTypeAddView.action")
	public String userTypeAddView(){
		return "user/userType-add";
	}
	/**
	 * 跳转到修改类型的页面
	 * @param request
	 * @param typeId
	 * @return
	 */
	@RequestMapping(value="/userTypeUpdateView.action")
	public String userTypeUpdateView(HttpServletRequest request,
							@RequestParam(value="typeId",required=true) Integer typeId){
		UserType userType = this.userTypeService.selectById(typeId);
		request.setAttribute("data", userType);
		return "user/userType-update";
	}
	
	/**
	 * 分页获取类型
	 * @return
	 */
	@RequestMapping(value="/getTypeByPage.action")
	@ResponseBody
	public Map<String, Object> getTypeByPage(@RequestParam(value = "page",defaultValue = "1") Integer page,
            								@RequestParam(value = "rows",defaultValue = "10") Integer rows,
            								@RequestParam(value = "typeName",required=false ) String typeName){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		try {
			List<Map<String, Object>> resultList = null;
			int totalRecords = 0;
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("typeName", typeName);
			
			//调用service方法,进行数据的查询
			Pagination<Map<String, Object>> pagination;
			//MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
			pagination = this.userTypeService.getPagingDatas(map, page, rows, "selectCount","selectList",UserTypeMapper.class);
			resultList = pagination.getPageList();//返回数据
			totalRecords = pagination.getTotalRecords();//返回行数	
			if(totalRecords>0){
				resultMap.put("rows", resultList);
				resultMap.put("total", totalRecords);
				resultMap.put("status", true);
				resultMap.put("msg", "获取成功");
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "没有获取到数据");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultMap;
	}
	
	/**
	 * 增加类型信息
	 * @param request
	 * @param param
	 * @return
	 */
	@RequestMapping(value="/addType.action")
	@ResponseBody
	public Map<String, Object> addType(HttpServletRequest request,UserType userType){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		userType.setIsDelete("0");
		userType.setAddTime(new Date());
		int rows = this.userTypeService.insert(userType);
		if (rows > 0) {
			resultMap.put("status", true);
			resultMap.put("msg", "增加成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "增加失败");
		}
		return resultMap;
	}
	
	
	/**
	 * 修改类型信息
	 * @param request
	 * @param param
	 * @return
	 */
	@RequestMapping(value="/updateType.action")
	@ResponseBody
	public Map<String, Object> updateType(HttpServletRequest request,UserType userType){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		int rows = this.userTypeService.updateById(userType);
		if (rows > 0) {
			resultMap.put("status", true);
			resultMap.put("msg", "修改成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "修改失败");
		}
		return resultMap;
	}
	
	/**
	 * 批量删除或单条删除产品
	 * @param request
	 * @param ids
	 * @return Map<String, Object>
	 */
	@RequestMapping(value="/deleteTypeList.action")
	@ResponseBody 
	public Map<String, Object> deleteTypeList(HttpServletRequest request,@RequestParam("ids") Integer[] ids){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		//将数组添加到list中
        List<Integer> list = new ArrayList<Integer>();
        for (Integer id : ids) {
            list.add(id);
        }
		if(list.size()>0){
			int rows = this.userTypeService.deleteTypeList(list);
			if(rows>0){
				resultMap.put("msg", "删除成功!!");
				resultMap.put("status", true);
			}else {
				resultMap.put("msg", "删除失败!!");
				resultMap.put("status", false);
			}
		}else{
			resultMap.put("msg", "参数不能为空!!");
			resultMap.put("status", false);
		}
		return resultMap;
	}
	
	/**
	 * 获取所有类型
	 * @return
	 */
	@RequestMapping(value="/getTypeList.action")
	@ResponseBody
	public Map<String, Object> getTypeList(@RequestParam(value="typeName",required=false) String typeName){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("typeName", typeName);
		//map.put("subject", subject);
		List<UserType> list = this.userTypeService.selectList(map);
		if (list.size()>0) {
			resultMap.put("data", list);
			resultMap.put("status", true);
			resultMap.put("msg", "获取成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "没有获取到数据");
		}
		return resultMap;
	}
	
}
