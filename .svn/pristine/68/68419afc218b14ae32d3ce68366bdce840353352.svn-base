package com.zhiliao.controller.order;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.dao.order.TradeMapper;
import com.zhiliao.model.common.Pagination;
import com.zhiliao.model.order.Trade;
import com.zhiliao.service.order.TradeService;
import com.zhiliao.util.dbdriver.MultipleDataSource;

/**
 * 交易记录的控制器
 * @author 毕伟谦
 *
 */
@Controller
@RequestMapping("/trade")
public class TradeController {

	@Autowired
	private TradeService tradeService;
	
	/**
	 * 分页获取交易记录信息
	 * @param page
	 * @param rows
	 * @param userId
	 * @return
	 */
	@RequestMapping(value="/getTradeByPage.action")
	@ResponseBody
	public Map<String, Object> getOrderByPage(@RequestParam(value = "page",defaultValue = "1") Integer page,
            								  @RequestParam(value = "rows",defaultValue = "20") Integer rows,
            								  @RequestParam(value = "userId",required=false)Integer userId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		try {
			List<Map<String, Object>> resultList = null;
			int totalRecords = 0;
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("userId", userId);
			//调用service方法,进行数据的查询
			Pagination<Map<String, Object>> pagination;
			MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
			pagination = this.tradeService.getPagingDatas(map, page, rows, "selectCount","selectList",TradeMapper.class);
			resultList = pagination.getPageList();//返回数据
			totalRecords = pagination.getTotalRecords();//返回行数	
			if(totalRecords>0){
				resultMap.put("rows", resultList);
				resultMap.put("total", totalRecords);
				resultMap.put("status", true);
				resultMap.put("msg", "获取成功");
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "没有获取到数据");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultMap;
	}
	
	
	/**
	 * 增加交易记录
	 * @param trade
	 * @return
	 */
	@RequestMapping("/addTrade.action")
	@ResponseBody
	public Map<String, Object> addTrade(Trade trade){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		trade.setAddTime(new Date());//设置增加时间
		trade.setStatus("1");//设置状态
		int rows = this.tradeService.insert(trade);
		if(rows > 0){
			resultMap.put("status", true);
			resultMap.put("msg", "增加成功!!");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "增加失败!!");
		}
		return resultMap;
	}
	
	
	/**
	 * 获取用户的交易记录
	 * @param userId
	 * @param tradeId
	 * @return
	 */
	@RequestMapping("/getTrade.action")
	@ResponseBody
	public Map<String, Object> getTrade(@RequestParam(value = "userId",required=false)Integer userId,
										@RequestParam(value = "tradeId",required=false)Integer tradeId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		if(null!=userId){
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("userId", userId);
			List<Trade> list = this.tradeService.selectList(map);
			if(list.size()>0){
				resultMap.put("status", true);
				resultMap.put("msg", "增加成功!!");
				resultMap.put("data", list);
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "增加失败!!");
			}
		}else if(null!=tradeId){
			Trade trade = this.tradeService.selectById(tradeId);
			if(null!=trade){
				resultMap.put("status", true);
				resultMap.put("msg", "增加成功!!");
				resultMap.put("data", trade);
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "增加失败!!");
			}
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "参数不能为空!!");
		}
		
		return resultMap;
	}
	
	
	
	
}
