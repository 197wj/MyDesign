package com.zhiliao.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.dao.order.OrderMapper;
import com.zhiliao.model.common.Pagination;
import com.zhiliao.model.order.Order;
import com.zhiliao.model.product.Meal;
import com.zhiliao.model.school.School;
import com.zhiliao.model.school.UcGrade;
import com.zhiliao.model.user.SysUser;
import com.zhiliao.model.user.UserType;
import com.zhiliao.service.order.OrderService;
import com.zhiliao.service.product.MealService;
import com.zhiliao.service.school.SchoolService;
import com.zhiliao.service.school.UcGradeService;
import com.zhiliao.service.user.SysUserService;
import com.zhiliao.service.user.UserTypeService;
import com.zhiliao.util.dbdriver.MultipleDataSource;

/**
 * 移动端的接口实现
 * @author 毕伟谦
 *
 */
@RequestMapping(value="/api")
@Controller
public class ApiController {

	@Autowired
	private MealService mealService;
	
	@Autowired
	private SysUserService userService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private UserTypeService  userTypeService;
	
	@Autowired
	private UcGradeService gradeService;
	
	@Autowired
	private SchoolService schoolService;
	/**
	 * 分页获取订单
	 * @return
	 */
	@RequestMapping(value="/getOrderByPage.action")
	@ResponseBody
	public Map<String, Object> getOrderByPage(@RequestParam(value = "page",defaultValue = "1") Integer page,
            								  @RequestParam(value = "rows",defaultValue = "20") Integer rows,
            								  @RequestParam(value="isEffect",defaultValue="1")String isEffect,
            								  @RequestParam(value = "schoolId",required = false) Integer schoolId,
            								  @RequestParam(value = "gradeId",required = false) Integer gradeId,
            								  @RequestParam(value = "classId",required = false) Integer classId,
            								  @RequestParam(value = "subject",required = false) Integer subject,
            								  @RequestParam(value = "typeName",required = false) String typeName){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		try {
			List<Map<String, Object>> resultList = null;
			int totalRecords = 0;
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("schoolId", schoolId);
			map.put("gradeId", gradeId);
			map.put("classId", classId);
			map.put("subject", subject);
			map.put("typeName", typeName);
			map.put("isEffect", isEffect);
			
			//调用service方法,进行数据的查询
			Pagination<Map<String, Object>> pagination;
			MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
			pagination = this.orderService.getPagingDatas(map, page, rows, "selectCount","selectList",OrderMapper.class);
			resultList = pagination.getPageList();//返回数据
			totalRecords = pagination.getTotalRecords();//返回行数	
			if(totalRecords>0){
				resultMap.put("rows", resultList);
				resultMap.put("total", totalRecords);
				resultMap.put("status", true);
				resultMap.put("msg", "获取成功");
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "没有获取到数据");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultMap;
	}
	
	
	/**
	 * 根据年级和科目获取套餐
	 * @param grade
	 * @param subject
	 * @return
	 */
	@RequestMapping(value="/getMealByGrade.action")
	@ResponseBody
	public Map<String, Object> getMealByGrade(@RequestParam(value="grade",required=false) Integer grade,
											  @RequestParam(value="subject",required=false)Integer subject){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("grade", grade);
		map.put("subject", subject);
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		List<Meal> list = this.mealService.selectList(map);
		if (list.size()>0) {
			resultMap.put("data", list);
			resultMap.put("status", true);
			resultMap.put("msg", "获取成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "没有获取到数据");
		}
		return resultMap;
	}

	
	/**
	 * 获取所有订单
	 * @return
	 */
	@RequestMapping(value="/getOrderList.action")
	@ResponseBody
	public Map<String, Object> getOrderList(@RequestParam(value="userId",required=false)Integer userId,
			  								@RequestParam(value="isEffect",defaultValue="1")String isEffect,
			  								@RequestParam(value="orderStatus",required=false)String orderStatus){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", userId);
		map.put("isEffect", isEffect);
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		List<Order> list = this.orderService.selectList(map);
		if (list.size()>0) {
			resultMap.put("data", list);
			resultMap.put("status", true);
			resultMap.put("msg", "获取成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "没有获取到数据");
		}
		return resultMap;
	}
	
	/**
	 * 移动端增加订单
	 * @param mealIds
	 * @param order
	 * @return
	 */
	@RequestMapping(value="/addOrder.action")
	@ResponseBody
	public Map<String, Object> addOrder(@RequestParam(value="mealIds",required=true)String mealIds,
										@RequestParam(value="orderPrice",required=true)Float orderPrice,
										Order order){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		String orderId = order.getOrderId();
		String []mealId = mealIds.split(",");
		MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
		SysUser user = this.userService.selectById(order.getUserId().longValue());
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为副数据源
		order.setUserNo(user.getUserAccount());//设置学生id
		order.setUserName(user.getUserName());//设置学生姓名
		order.setSchoolId(user.getSchoolId());//设置学校
		order.setSchoolName(user.getSchool().getSchoolName());//学校名字
		order.setGradeName(user.getGrade().getGradeName());//年级名字
		order.setClassId(user.getSysClass().getClassId());//班级id
		order.setClassName(user.getSysClass().getClassName());//班级名字
		
		Map<String, Object> map = new HashMap<String, Object>();
		int rows = 0;
		SysUser user2 = new SysUser();
		user2.setUserId(order.getUserId().longValue());
		for(int i=0;i<mealId.length;i++){
			Meal meal = this.mealService.selectById(Integer.valueOf(mealId[i]));
			if(mealId.length==1){
				order.setOrderId(orderId);//设置订单号
				order.setPrice(orderPrice);
			}else{
				order.setOrderId(orderId+"-"+meal.getSubject());//设置订单号
				order.setPrice(orderPrice/2);
			}
			order.setMealId(Integer.valueOf(mealId[i]));//设置套餐号
			order.setSubjectCode(meal.getSubject());//设置科目id
			map.clear();
			map.put("classId", user.getSysClass().getClassId());
			map.put("subjectCode", meal.getSubject());
			MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
			List<SysUser> list = this.userService.selectTeacherList(map);
			MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为副数据源
			for (SysUser teacher :list) {//设置教师信息
				order.setTeacherId(teacher.getUserId().intValue());
				order.setTeacherName(teacher.getUserName());
				order.setTeacherTel(teacher.getUserAccount());
			}
			map.clear();
			map.put("name", "付费");
			List<UserType> types = this.userTypeService.selectList(map);
			
			for (UserType type:types) {
				order.setTypeId(type.getTypeId());
				user2.setTypeId(type.getTypeId());
			}
			
			order.setIsEffect("1");
			order.setOrderStatus("0");
			order.setAddTime(new Date());
			rows += this.orderService.insert(order);
		}
		if(mealId.length==rows){
			MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
			this.userService.updateById(user2);
			MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为副数据源
			resultMap.put("status", true);
			resultMap.put("msg", "增加成功!!");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "增加失败!!");
		}
		
		return resultMap;
	}
	
	
	/**
	 * 订单付款
	 * @param order
	 * @return
	 */
	@RequestMapping(value="/payOrder.action")
	@ResponseBody
	public Map<String, Object> payOrder(Order order){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		order.setOrderStatus("1");
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		int rows = this.orderService.payOrder(order);
		if(rows >0){
			resultMap.put("status", true);
			resultMap.put("msg", "操作成功");
		}else{
			resultMap.put("status", false);
			resultMap.put("msg", "操作失败");
		}
		return resultMap;
	}
	
	/**
	 * 获取学校年级的开通状态
	 * @param schoolId
	 * @param gradeCode
	 * @return
	 */
	@RequestMapping("/getSchoolGrade.action")
	@ResponseBody
	public Map<String, Object> getSchoolGrade(@RequestParam(value="schoolId") Integer schoolId,
											  @RequestParam(value="gradeCode",required = false)String gradeCode){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
		School school = this.schoolService.selectById(schoolId);
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		if(null!=school){
			if(null!=school.getIsOpen()){
				if("1".equals(school.getIsOpen())){
					MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
					UcGrade grade = this.gradeService.selectById(gradeCode);
					MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
					if(null!=grade){
						if(null!=grade.getIsOpen()){
							if("1".equals(grade.getIsOpen())){
								resultMap.put("status", true);
								resultMap.put("msg", "年级已经开通");
							}else {
								resultMap.put("status", false);
								resultMap.put("msg", "年级没有开通");
							}
						}
					}else {
						resultMap.put("status", false);
						resultMap.put("msg", "没有查询到年级信息!!");
					}
				}else {
					resultMap.put("status", false);
					resultMap.put("msg", "学校没有开通!!");
				}
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "没有查询到学校信息!!");
			}
		}
		return resultMap;
	}
	
	
	
	
	
	
	
}
