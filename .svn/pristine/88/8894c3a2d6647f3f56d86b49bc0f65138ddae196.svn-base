package com.zhiliao.controller.php;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.model.php.SchCount;
import com.zhiliao.model.school.School;
import com.zhiliao.service.order.OrderService;
import com.zhiliao.service.php.SchCountService;
import com.zhiliao.service.school.SchoolService;
import com.zhiliao.util.ListSortUtil;
import com.zhiliao.util.dbdriver.MultipleDataSource;

@Controller
@RequestMapping("schCount")
public class schCountController {

	@Autowired
	private SchCountService countService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private SchoolService schoolService;
	/**
	 * 跳转到学校统计页面
	 * @return
	 */
	@RequestMapping("/schoolCount.action")
	public String schCountView(HttpServletRequest request,
							   @RequestParam(value="schoolId",required=false)Integer schoolId,
							   @RequestParam(value="gradeId",required=false)Integer gradeId,
							   @RequestParam(value="week",required=false)Integer week){
		request.getSession().setAttribute("schoolId", schoolId);
		request.getSession().setAttribute("gradeId", gradeId);
		MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
		School school = this.schoolService.selectById(schoolId);
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		String gradeName = "";
		if(gradeId==14){
			gradeName = "四年级";
		}else if(gradeId==15){
			 gradeName = "五年级";
		}
		request.getSession().setAttribute("schoolName", school.getSchoolName());
		request.getSession().setAttribute("gradeName", gradeName);
		request.getSession().setAttribute("week", week);
		
		return "count/schoolCount";
	}
	
	
	
	@RequestMapping("/getCountInfo.action")
	@ResponseBody
	public Map<String, Object> getCountInfo(@RequestParam(value="schoolId",required = true)Integer schoolId,
											@RequestParam(value="gradeId",required = false)Integer gradeId,
											@RequestParam(value="week",required = false)Integer week){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
		School school = this.schoolService.selectById(schoolId);
		
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		map.put("week", week);
		List<SchCount> list = this.countService.getCountInfo(map);//综合数量
		for(SchCount count:list){
			map.clear();
			//map.put("number", count.getWeek());
			//map.put("classId", count.getClassId());
			//sql语句
			String sql = "SELECT count(ehuserid) FROM x2_examhistory_"+school.getAreaId()+" as x2 "
					+ " LEFT JOIN tms_els_test.sys_school ss ON ss.school_id = x2.ehschoolid "
					+ " where 1=1 ";
			if(null!=count.getClassId()){
				sql+=" AND ehclassid ="+count.getClassId();
			}
			if(null!=count.getWeek()){
				sql+=" and ehzhou ="+count.getWeek();
			}
			map.clear();
			map.put("sql", sql);
			
			
			int rows = this.countService.getGrantCount(map);
			count.setGrantCount(rows);
		}
		map.clear();
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> cityList = this.countService.getCityScore(map);
		
		map.clear();
		map.put("gradeId", gradeId);
		map.put("week", week);
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> cityRank = this.countService.getCityRank(map);
		
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		//设置城市平均分
		for(SchCount schCount:list){
			for(SchCount city:cityList){
				if(schCount.getWeek()==city.getWeek() && schCount.getGradeId()==city.getGradeId()){
					float cityAvg = 0;
					if (city.getReferCount()!=0) {
						cityAvg = (float)(city.getTotalScore()/city.getReferCount());
					}
					schCount.setCityAvg(cityAvg);
					continue;
				}
			}
		}
		
		sort(list);//学校排名
		sort1(cityRank);//城市排名
		
		for(SchCount count : list){
			for(SchCount schCount:cityRank){
				if(count.getClassId()==schCount.getClassId()){
					count.setCityRank(schCount.getCityRank());
					continue;
				}
			}
		}
		//获取开通数
		for (SchCount count :list) {
			map.clear();
			map.put("classId", count.getClassId());
			int rows = this.orderService.getOrderCount(map);
			count.setOpenCount(rows);
		}
		
		
		
		
		
		resultMap.put("status", true);
		resultMap.put("data", list);
		
		return resultMap;
	}
	
	/**
	 * 获取英语和数学的提交人数
	 * @param schoolId
	 * @param gradeId
	 * @return
	 */
	@RequestMapping("/getScoreInfo.action")
	@ResponseBody
	public Map<String, Object> getScoreInfo(@RequestParam(value="schoolId",required = false)Integer schoolId,
											@RequestParam(value="gradeId",required = false)Integer gradeId,
											@RequestParam(value="week",required = false)Integer week){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
		School school = this.schoolService.selectById(schoolId);
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		map.put("subject", 11);
		map.put("week", week);
		List<SchCount> mathList = this.countService.getScoreInfo(map);//获取数学人数和总分的统计
		map.clear();
		map.put("subject", 11);
		map.put("number", week);
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> mathCity = this.countService.getCityScore(map);//获取数学市级成绩
		for(SchCount count:mathList){
			map.clear();
			//map.put("examId", count.getExamId());
			//map.put("classId", count.getClassId());
			//sql语句
			String sql = "SELECT count(ehuserid) FROM x2_examhistory_"+school.getAreaId()+" as x2 "
					+ " LEFT JOIN tms_els_test.sys_school ss ON ss.school_id = x2.ehschoolid "
					+ " where 1=1 ";
			if(null!=count.getClassId()){
				sql+=" AND ehclassid ="+count.getClassId();
			}
			if(null!= count.getExamId()){
				sql+=" and ehexamid ="+count.getExamId();
			}
			map.clear();
			map.put("sql", sql);
			int rows = this.countService.getGrantCount(map);
			count.setGrantCount(rows);
		}
		map.clear();
		map.put("subject", 11);
		map.put("gradeId", gradeId);
		map.put("week", week);
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> cityRankM = this.countService.getCityRank(map);//数学
		
		
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		map.put("subject", 10);
		map.put("week", week);
		List<SchCount> engList = this.countService.getScoreInfo(map);//获取英语人数和总分的统计
		map.clear();
		map.put("subject", 10);
		map.put("number", week);
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> engCity = this.countService.getCityScore(map);//获取数学市级成绩
		for(SchCount count:engList){
			map.clear();
			//map.put("examId", count.getExamId());
			//map.put("classId", count.getClassId());
			//sql语句
			String sql = "SELECT count(ehuserid) FROM x2_examhistory_"+school.getAreaId()+" as x2 "
					+ " LEFT JOIN tms_els_test.sys_school ss ON ss.school_id = x2.ehschoolid "
					+ " where 1=1 ";
			if(null!=count.getClassId()){
				sql+=" AND ehclassid ="+count.getClassId();
			}
			if(null!= count.getExamId()){
				sql+=" and ehexamid ="+count.getExamId();
			}
			map.clear();
			map.put("sql", sql);
			int rows = this.countService.getGrantCount(map);
			count.setGrantCount(rows);
		}
		map.clear();
		map.put("subject", 10);
		map.put("gradeId", gradeId);
		map.put("week", week);
		map.put("areaId", school.getAreaId());//获取区域id
		List<SchCount> cityRankE = this.countService.getCityRank(map);//数学
		
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		
		//设置城市数学平均分
		for(SchCount schCount:mathList){
			for(SchCount city:mathCity){
				if(schCount.getWeek()==city.getWeek() && schCount.getGradeId()==city.getGradeId()){
					float cityAvg = 0;
					if (city.getReferCount()!=0) {
						cityAvg = (float)(city.getTotalScore()/city.getReferCount());
					}
					schCount.setCityAvg(cityAvg);
					continue;
				}
			}
		}
		//设置城市英语平均分
		for(SchCount schCount:engList){
			for(SchCount city:engCity){
				if(schCount.getWeek()==city.getWeek() && schCount.getGradeId()==city.getGradeId()){
					float cityAvg = 0;
					if (city.getReferCount()!=0) {
						cityAvg = (float)(city.getTotalScore()/city.getReferCount());
					}
					schCount.setCityAvg(cityAvg);
					continue;
				}
			}
		}
		
		sort(mathList);//学校排名
		sort1(cityRankM);//城市排名
		
		sort(engList);//学校排名
		sort1(cityRankE);//城市排名
		
		for(SchCount count : mathList){
			for(SchCount schCount:cityRankM){
				if(count.getClassId()==schCount.getClassId()){
					count.setCityRank(schCount.getCityRank());
					continue;
				}
			}
		}
		
		for(SchCount count : engList){
			for(SchCount schCount:cityRankE){
				if(count.getClassId()==schCount.getClassId()){
					count.setCityRank(schCount.getCityRank());
					continue;
				}
			}
		}
		//获取开通数
		for (SchCount count :mathList) {
			map.clear();
			map.put("classId", count.getClassId());
			map.put("subject", 11);
			map.put("areaId", school.getAreaId());//获取区域id
			int rows = this.orderService.getOrderCount(map);
			count.setOpenCount(rows);
		}
		//获取开通数
		for (SchCount count :engList) {
			map.clear();
			map.put("classId", count.getClassId());
			map.put("subject", 10);
			map.put("areaId", school.getAreaId());//获取区域id
			int rows = this.orderService.getOrderCount(map);
			count.setOpenCount(rows);
		}
		
		
		
		resultMap.put("status", true);
		resultMap.put("math", mathList);
		resultMap.put("eng", engList);
		
		return resultMap;
	}
	
	
	/**
	 * 学校进行排序
	 * @param list
	 */
	public void sort(List<SchCount> list){
		
		//获取平均分
		for (SchCount count:list) {
			if(count.getReferCount()!=0){
				count.setSchoolAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setSchoolAvg((float)0);
			}
		}
		//排序
		ListSortUtil<SchCount> sortUtil = new ListSortUtil<SchCount>();
		
		sortUtil.sort(list, "schoolAvg", "desc");
		
		for (int i = 0; i < list.size(); i++) {
			list.get(i).setSchoolRank(i+1);
		}
	}
	
	/**
	 * 城市进行排序
	 * @param list
	 */
	public void sort1(List<SchCount> list){
		//获取平均分
		for (SchCount count:list) {
			if(count.getReferCount()!=0){
				count.setCityAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setCityAvg((float)0);
			}
		}
		//排序
		ListSortUtil<SchCount> sortUtil = new ListSortUtil<SchCount>();
		
		sortUtil.sort(list, "cityAvg", "desc");
		
		for (int i = 0; i < list.size(); i++) {
			list.get(i).setCityRank(i+1);
		}
	}
	
	/**
	 * 获取平均分,产生折线图
	 * @param schoolId
	 * @param gradeId
	 * @return
	 */
	@RequestMapping("/getAvgInfo.action")
	@ResponseBody
	public Map<String, Object> getAvgInfo(@RequestParam(value="schoolId",required = false)Integer schoolId,
										  @RequestParam(value="gradeId",required = false)Integer gradeId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		MultipleDataSource.setDataSourceKey("PHPDataSource");//设置为副数据源
		//获取数学平均分
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		map.put("subject",11);
		List<SchCount> mathList = this.countService.getAvgInfo(map);
		for(SchCount count :mathList){//计算平均分
			if(count.getReferCount()!=0){
				count.setCityAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setCityAvg((float)0);
			}
		}
		//获取英语平均分
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		map.put("subject",10);
		List<SchCount> engList = this.countService.getAvgInfo(map);
		for(SchCount count :engList){//计算平均分
			if(count.getReferCount()!=0){
				count.setCityAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setCityAvg((float)0);
			}
		}
		//获取综合平均分
		map.clear();
		map.put("schoolId", schoolId);
		map.put("gradeId", gradeId);
		List<SchCount> list = this.countService.getAvgInfo(map);
		for(SchCount count :list){//计算平均分
			if(count.getReferCount()!=0){
				count.setCityAvg((float)count.getTotalScore()/count.getReferCount());
			}else {
				count.setCityAvg((float)0);
			}
		}
		MultipleDataSource.setDataSourceKey("MasterDataSource");//设置为主数据源
		resultMap.put("status", true);
		resultMap.put("data", list);
		resultMap.put("eng", engList);
		resultMap.put("math", mathList);
		return resultMap;
	}
	
	
	
	
	
	
	
	
}
