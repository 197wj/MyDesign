package com.zhiliao.controller.product;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zhiliao.aop.SysLog;
import com.zhiliao.dao.product.ProductMapper;
import com.zhiliao.model.common.Pagination;
import com.zhiliao.model.product.Product;
import com.zhiliao.service.product.ProductService;

/**
 * 产品的控制层
 * @author 毕伟谦
 *
 */
@RequestMapping(value="/product")
@Controller
public class ProductController {

	@Autowired
	private ProductService productService;

	/**
	 * 跳转到产品列表的页面
	 * @return
	 */
	@RequestMapping(value="/productView.action")
	public String productView(){
		return "product/product-list";
	}
	
	/**
	 * 跳转到增加产品页面
	 * @return
	 */
	@RequestMapping(value="/productAddView.action")
	public String productAddView(){
		return "product/product-add";
	}
	
	/**
	 * 跳转到修改页面
	 * @return
	 */
	@RequestMapping(value="/productUpdateView.action")
	public String productUpdateView(HttpServletRequest request,
			@RequestParam(value="productId",required=true) Integer productId){
		Product product = this.productService.selectById(productId);
		request.setAttribute("data", product);
		return "product/product-update";
	}
	
	
	
	/**
	 * 分页获取产品
	 * @return
	 */
	@RequestMapping(value="/getProByPage.action")
	@ResponseBody
	public Map<String, Object> getProByPage(@RequestParam(value = "page",defaultValue = "1") Integer page,
            								@RequestParam(value = "rows",defaultValue = "10") Integer rows,
            								@RequestParam(value = "gradeCode",required=false ) Integer gradeCode,
            								@RequestParam(value = "subjectCode",required=false ) Integer subjectCode,
            								@RequestParam(value = "isShelf",required = false ) String isShelf){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		try {
			List<Map<String, Object>> resultList = null;
			int totalRecords = 0;
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("isShelf", isShelf);
			map.put("gradeCode", gradeCode);
			map.put("subjectCode", subjectCode);
			
			//调用service方法,进行数据的查询
			Pagination<Map<String, Object>> pagination;
			//MultipleDataSource.setDataSourceKey("ViceDataSource");//设置为副数据源
			pagination = this.productService.getPagingDatas(map, page, rows, "selectCount","selectList",ProductMapper.class);
			resultList = pagination.getPageList();//返回数据
			totalRecords = pagination.getTotalRecords();//返回行数	
			if(totalRecords>0){
				resultMap.put("rows", resultList);
				resultMap.put("total", totalRecords);
				resultMap.put("status", true);
				resultMap.put("msg", "获取成功");
			}else {
				resultMap.put("status", false);
				resultMap.put("msg", "没有获取到数据");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultMap;
	}
	
	
	/**
	 * 增加产品信息
	 * @param request
	 * @param param
	 * @return
	 */
	@SysLog(operObject="产品",operPath="product/addProduct.action",operType="增加产品")
	@RequestMapping(value="/addProduct.action")
	@ResponseBody
	public Map<String, Object> addProduct(HttpServletRequest request,Product product){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		product.setIsDelete("0");
		product.setAddTime(new Date());
		product.setModifyTime(new Date());
		int rows = this.productService.insert(product);
		if (rows > 0) {
			resultMap.put("status", true);
			resultMap.put("msg", "增加成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "增加失败");
		}
		return resultMap;
	}
	
	
	/**
	 * 修改产品信息
	 * @param request
	 * @param param
	 * @return
	 */
	@SysLog(operObject="产品",operPath="product/updateProduct.action",operType="修改产品")
	@RequestMapping(value="/updateProduct.action")
	@ResponseBody
	public Map<String, Object> updateProduct(HttpServletRequest request,Product product){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		product.setModifyTime(new Date());
		int rows = this.productService.updateById(product);
		if (rows > 0) {
			resultMap.put("status", true);
			resultMap.put("msg", "修改成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "修改失败");
		}
		return resultMap;
	}
	
	/**
	 * 批量删除或单条删除产品
	 * @param request
	 * @param ids
	 * @return Map<String, Object>
	 */
	@SysLog(operObject="产品",operPath="product/deleteProList.action",operType="删除产品")
	@RequestMapping(value="/deleteProList.action")
	@ResponseBody 
	public Map<String, Object> deleteProList(HttpServletRequest request,@RequestParam("ids") Integer[] ids){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		//将数组添加到list中
        List<Integer> list = new ArrayList<Integer>();
        for (Integer id : ids) {
            list.add(id);
        }
		if(list.size()>0){
			int rows = this.productService.deleteProList(list);
			if(rows>0){
				resultMap.put("msg", "删除成功!!");
				resultMap.put("status", true);
			}else {
				resultMap.put("msg", "删除失败!!");
				resultMap.put("status", false);
			}
		}else{
			resultMap.put("msg", "参数不能为空!!");
			resultMap.put("status", false);
		}
		return resultMap;
	}
	
	
	/**
	 * 获取所有上架产品
	 * @return
	 */
	@RequestMapping(value="/getProList.action")
	@ResponseBody
	public Map<String, Object> getProList(@RequestParam(value="isShelf",defaultValue="0") String isShelf,
										  @RequestParam(value = "gradeCode",required=false ) Integer gradeCode,
										  @RequestParam(value = "subjectCode",required=false ) Integer subjectCode,
										  @RequestParam(value = "termId",required=false ) Integer termId){
		Map<String,Object> resultMap = new LinkedHashMap<String,Object>();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("isShelf", isShelf);
		map.put("gradeCode", gradeCode);
		map.put("subjectCode", subjectCode);
		map.put("termId", termId);
		List<Product> list = this.productService.selectList(map);
		if (list.size()>0) {
			resultMap.put("data", list);
			resultMap.put("status", true);
			resultMap.put("msg", "获取成功");
		}else {
			resultMap.put("status", false);
			resultMap.put("msg", "没有获取到数据");
		}
		return resultMap;
	}
	
	
	
	
	
}
